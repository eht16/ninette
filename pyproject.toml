[project]
name = "ninette"
authors = [
    { name = "Enrico TrÃ¶ger", email = "enrico.troeger@uvena.de" },
]
description = "A simple alerting system to get notified about important events or breaking news."
readme = "README.md"
license = { text="MIT" }
keywords = [
    "mowas",
    "dwd",
    "nina",
    "warning",
    "alerting",
]
classifiers = [
    "Environment :: No Input/Output (Daemon)",
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Topic :: Communications",
]
requires-python = ">=3.8"
dependencies = [
    "html2text",
    "py-staticmaps",
    "requests",
]
dynamic = ["version"]

[project.scripts]
ninette = "ninette.cli:main"

[project.urls]
"Homepage" = "https://github.com/eht16/ninette"
"Bug Tracker" = "https://github.com/eht16/ninette/issues"

[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[tool.setuptools.dynamic]
version = {attr = "ninette.__version__"}

###
### Ruff
###
[tool.ruff]
line-length = 100

exclude = [
    ".eggs",
    ".git",
    ".ruff_cache",
    ".tox",
    "__pypackages__",
    "_build",
    "venv",
    "migrations"
]


[tool.ruff.lint]
select = [
    "A", # flake8-builtins
    "ARG", # flake8-unused-arguments,
    "B", # flake8-bugbear
    "BLE", # flake8-blind-except
    "C4", # flake8-comprehensions
    "C90", # mccabe
    "DJ", # flake8-django
    "DTZ", # flake8-datetimez
    "E", # pycodestyle errors
    "EM", # flake8-errmsg
    "ERA", # eradicate
    "EXE", # flake8-executable
    "F", # Pyflakes
    "FBT", # flake8-boolean-trap
    "FIX", # flake8-fixme,
    "FLY", # flynt,
    "G", # flake8-logging-format
    "I", # isort
    "ICN", # flake8-import-conventions
    "INP", # flake8-no-pep420
    "INT", # flake8-gettext
    "ISC", # flake8-implicit-str-concat
    "N", # pep8-naming
    "NPY", # NumPy-specific rules
    "PD", # pandas-vet
    "PERF", # Perflint
    "PERF", # Perflint,
    "PGH", # pygrep-hooks
    "PIE", # flake8-pie
    "PL", # Pylint
    "PT", # flake8-pytest-style
    "PTH", # flake8-use-pathlib,
    "PYI", # flake8-pyi
    "Q", # flake8-quotes
    "RET", # flake8-return
    "RSE", # flake8-raise
    "RUF", # Ruff-specific rules
    "S", # flake8-bandit
    "SIM", # flake8-simplify
    "SLF", # flake8-self
    "T10", # flake8-debugger
    "T20", # flake8-print
    "TCH", # flake8-type-checking
    "TD", # flake8-todos,
    "TID", # flake8-tidy-imports
    "TRY", # tryceratops
    "UP", # pyupgrade
    "W", # pycodestyle warnings
    "YTT", # flake8-2020,
]

ignore = [
    #'FBT002', # Boolean default value in function definition
    'BLE001', # Do not catch blind exception: `Exception
    'RET504', # Unnecessary variable assignment before `return` statement
    'SIM108', # Combine `if` branches using logical `or` operator
    'SIM114', # Combine `if` branches using logical `or` operator
    'PERF203', # `try`-`except` within a loop incurs performance overhead
    'TRY400', # Use `logging.exception` instead of `logging.error`

]

fixable = ["I", "Q000"]
unfixable = []

[tool.ruff.lint.isort]
lines-after-imports = 2
case-sensitive = true
length-sort = false

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"
multiline-quotes = "single"

[tool.ruff.lint.pylint]
allow-magic-value-types = ["bytes", "int", "str"]
max-args = 7
